{
"editor" : ".pos 0\n    irmovl stack, %esp\n    irmovl src, %edx # Affecte l'adresse src à %edx\n    pushl %edx # empile l'adresse de src pour le passer comme paramètre à la fonction\n    irmovl dest, %edx # Affecte l'adresse dest à %edx\n    pushl %edx # empile l'adresse de tableau dest pour le passer comme 2ème paramètre à la fonction \n    irmovl 3, %edx # exemple de nombre maximale de mots a copier \n    pushl %edx # empile le nombre maximale pour le passer comme premier paramètre à la fonction  \n    \n    call strncpy # Appel de la fonction strncpy\n    iaddl 12, %esp # liberer la pile \n    halt # fin du programme \n    \n# fonction strncpy     \nstrncpy:\n        #récuperer les paramètres de la fonction \n        mrmovl 4(%esp), %ecx\n        mrmovl 8(%esp), %edi\n        mrmovl 12(%esp), %esi\n        label:\n            mrmovl (%esi), %eax #copier le contenu de la case du tableau src, pointée par %esi dans le registre %eax \n            iaddl 4, %esi #incrémente %esi par 4, pour passer a la case suivante du tableau src \n            rmmovl %eax, (%edi) # c'est vrai on copie la valeur de la case du tableau src dans dest, avant meme de tester si elle est egale à 0 ou non, mais on n'a pas trouvé autre facon de le faire \n            iaddl 4, %edi # mettre a jour %edi, pour qu'il pointe vers la case suivante \n            isubl 0, %eax # on fait la soustraction a fin de mettre a jours le flag Z (pour loopne ), dans le but est de tester si la valeur sentinelle a été trouvée ou non \n            loopne label # si la valeur de %ecx differente de 0 et z égale à 0, on effectue le saut vers label pour itérer la boucle, sinon on fini le programme  \n        fin: ret    \n    .pos 0x100\n    #src est un tableau de chaines de acractères chaque caractere est représentée par son code ascii sur 1 octet (64 pour 'a' ect ) (32 bits par case, 4 caractères par case)\nsrc:\n    .long 0x68697071 #'efgh'\n    .long 0x64656667 #'abcd'\n    .long 0x00000000 # valeur sentinelle(0)\n    .long 0x65676869\n    .long 0x65676869\n\n     .pos 0x300\n     #dest est un tableaux de destination la ou on va copier les elements de src  \ndest : \n     .pos 0x200 \nstack:",
"instructionSet" : [
  {
    "name": "nop",
    "icode": 0,
    "ifun": 0,
    "args": ""
  },
  {
    "name": "halt",
    "icode": 1,
    "ifun": 0,
    "args": ""
  },
  {
    "name": "rrmovl",
    "icode": 2,
    "ifun": 0,
    "args": "rA,rB"
  },
  {
    "name": "irmovl",
    "icode": 3,
    "ifun": 0,
    "args": "valC,rB"
  },
  {
    "name": "rmmovl",
    "icode": 4,
    "ifun": 0,
    "args": "rA,valC?(rB)"
  },
  {
    "name": "rmmovl",
    "icode": 4,
    "ifun": 0,
    "args": "rA,valC"
  },
  {
    "name": "mrmovl",
    "icode": 5,
    "ifun": 0,
    "args": "valC?(rB),rA"
  },
  {
    "name": "mrmovl",
    "icode": 5,
    "ifun": 0,
    "args": "valC,rA"
  },
  {
    "name": "addl",
    "icode": 6,
    "ifun": 0,
    "args": "rA,rB"
  },
  {
    "name": "subl",
    "icode": 6,
    "ifun": 1,
    "args": "rA,rB"
  },
  {
    "name": "andl",
    "icode": 6,
    "ifun": 2,
    "args": "rA,rB"
  },
  {
    "name": "xorl",
    "icode": 6,
    "ifun": 3,
    "args": "rA,rB"
  },
  {
    "name": "sall",
    "icode": 6,
    "ifun": 4,
    "args": "rA,rB"
  },
  {
    "name": "sarl",
    "icode": 6,
    "ifun": 5,
    "args": "rA,rB"
  },
  {
    "name": "jmp",
    "icode": 7,
    "ifun": 0,
    "args": "valC"
  },
  {
    "name": "jle",
    "icode": 7,
    "ifun": 1,
    "args": "valC"
  },
  {
    "name": "jl",
    "icode": 7,
    "ifun": 2,
    "args": "valC"
  },
  {
    "name": "je",
    "icode": 7,
    "ifun": 3,
    "args": "valC"
  },
  {
    "name": "jne",
    "icode": 7,
    "ifun": 4,
    "args": "valC"
  },
  {
    "name": "jge",
    "icode": 7,
    "ifun": 5,
    "args": "valC"
  },
  {
    "name": "jg",
    "icode": 7,
    "ifun": 6,
    "args": "valC"
  },
  {
    "name": "call",
    "icode": 8,
    "ifun": 0,
    "args": "valC"
  },
  {
    "name": "ret",
    "icode": 9,
    "ifun": 0,
    "args": ""
  },
  {
    "name": "pushl",
    "icode": 10,
    "ifun": 0,
    "args": "rA"
  },
  {
    "name": "popl",
    "icode": 11,
    "ifun": 0,
    "args": "rA"
  },
  {
    "name": "iaddl",
    "icode": 12,
    "ifun": 0,
    "args": "valC,rB"
  },
  {
    "name": "isubl",
    "icode": 12,
    "ifun": 1,
    "args": "valC,rB"
  },
  {
    "name": "iandl",
    "icode": 12,
    "ifun": 2,
    "args": "valC,rB"
  },
  {
    "name": "ixorl",
    "icode": 12,
    "ifun": 3,
    "args": "valC,rB"
  },
  {
    "name": "isall",
    "icode": 12,
    "ifun": 4,
    "args": "valC,rB"
  },
  {
    "name": "isarl",
    "icode": 12,
    "ifun": 5,
    "args": "valC,rB"
  },
  {
    "name": "decl",
    "icode": 13,
    "ifun": 1,
    "args": "rA"
  },
  {
    "name": "ncall",
    "icode": 10,
    "ifun": 1,
    "args": "valC"
  },
  {
    "name": "nret",
    "icode": 11,
    "ifun": 1,
    "args": ""
  },
  {
    "name": "loop",
    "icode": 14,
    "ifun": 0,
    "args": "valC"
  },
  {
    "name": "loope",
    "icode": 14,
    "ifun": 3,
    "args": "valC"
  },
  {
    "name": "loopne",
    "icode": 14,
    "ifun": 4,
    "args": "valC"
  }
],
"hcl" : "####################################################################\n#  HCL Description of control for single-cycle y86 processor \"Seq\" #\n#                                                                  #\n#  Original (C) Randal E. BRYANT, David R. O'HALLARON, 2002        #\n#  Updates  (C) Alexis BANDET, Valentin GAISSET, Romain GUISSET,   #\n#               Florian SIMBA, 2020                                #\n#  Updates  (C) El Hadji Pathe FALL, Corentin MERCIER, Benjamin    #\n#               MORO, Nicolas MARIN PACHE, Nathan PRECIGOUT, 2021  #\n#  Updates  (C) Mohamed Amine BEN AMARA, 2022                      #\n#  Updates  (C) Thomas CASTAGNOS, Julien CHAVEROUX, Pierre-Henri   #\n#               DUPOUY, Jeremy PAQUIOT, 2023                       #\n####################################################################\n\n## Symbolic representation of y86 instruction codes ################\n\nintsig NOP                      'instructionSet.get(\"nop\").icode'\nintsig HALT                     'instructionSet.get(\"halt\").icode'\nintsig RRMOVL                   'instructionSet.get(\"rrmovl\").icode'\nintsig IRMOVL                   'instructionSet.get(\"irmovl\").icode'\nintsig RMMOVL                   'instructionSet.get(\"rmmovl\").icode'\nintsig MRMOVL                   'instructionSet.get(\"mrmovl\").icode'\nintsig OPL                      'instructionSet.get(\"addl\").icode'\nintsig IOPL                     'instructionSet.get(\"iaddl\").icode'\nintsig JXX                      'instructionSet.get(\"jmp\").icode'\nintsig CALL                     'instructionSet.get(\"call\").icode'\nintsig RET                      'instructionSet.get(\"ret\").icode'\nintsig PUSHL                    'instructionSet.get(\"pushl\").icode'\nintsig POPL                     'instructionSet.get(\"popl\").icode'\nintsig LOOP                     'instructionSet.get(\"loop\").icode'\n\n\n## Symbolic representation of y86 registers referenced explicitly ##\n\nintsig RESP                     'registers.esp'         # Stack Pointer\nintsig REBP                     'registers.ebp'         # Frame Pointer\nintsig RECX                     'registers.ecx'         \nintsig RNONE                    'registers.none'        # Special value indicating \"no register\"\n\n## ALU functions referenced explicitly #############################\n\nintsig ALUADD                   'alufct.A_ADD'          # ALU should add its arguments\n\n## Signals that can be referenced by control logic #################\n\n## Fetch stage inputs\nintsig pc                       'ctx.pc'                # Program counter\n\n## Fetch stage computations\nintsig icode                    'ctx.icode'             # Instruction control code\nintsig ifun                     'ctx.ifun'              # Instruction function\nintsig rA                       'ctx.ra'                # rA field from instruction\nintsig rB                       'ctx.rb'                # rB field from instruction\nintsig valC                     'ctx.valC'              # Constant from instruction\nintsig valP                     'ctx.valP'              # Address of following instruction\n\n## Decode stage computations\nintsig valA                     'ctx.valA'              # Value from register A port\nintsig valB                     'ctx.valB'              # Value from register B port\n\n## Execute stage computations\nintsig valE                     'ctx.valE'              # Value computed by ALU\nboolsig Bch                     'ctx.bcond'             # Branch test\n\n## Memory stage computations\nintsig valM                     'ctx.valM'              # Value read from memory\n\n####################################################################\n#    Control Signal Definitions.                                   #\n####################################################################\n\n## Fetch stage #####################################################\n\n## Does fetched instruction require a register numbers byte?\nbool need_regids =\n    icode in { RRMOVL, OPL, IOPL, PUSHL, POPL, IRMOVL, RMMOVL, MRMOVL };\n\n## Does fetched instruction require a constant word?\nbool need_valC =\n    icode in { IRMOVL, RMMOVL, MRMOVL, JXX, CALL, IOPL, LOOP };\n\n## Is instruction valid?\nbool instr_valid =\n    icode in { NOP, HALT, RRMOVL, IRMOVL, RMMOVL, MRMOVL,\n               OPL, IOPL, JXX, CALL, RET, PUSHL, POPL,LOOP } ;\n\n## Decode stage ####################################################\n\n## What register should be used as the A source?\nint srcA = [\n    icode in { RRMOVL, RMMOVL, OPL, PUSHL } : rA;\n    icode in { POPL, RET } : RESP;\n    1 : RNONE;  # Don't need register for reading\n];\n\n## What register should be used as the B source?\nint srcB = [\n    icode in { OPL, IOPL, RMMOVL, MRMOVL } : rB;\n    icode in { PUSHL, POPL, CALL, RET } : RESP;\n    icode in { LOOP} : RECX; \n    1 : RNONE;  # Don't need register for reading\n];\n\n## What register should be used as the E destination?\nint dstE = [\n    icode in { RRMOVL, IRMOVL, OPL, IOPL } : rB;\n    icode in { PUSHL, POPL, CALL, RET } : RESP;\n    icode in { LOOP} : RECX; \n    1 : RNONE;  # Don't need register for writing\n];\n\n## What register should be used as the M destination?\nint dstM = [\n    icode in { MRMOVL, POPL } : rA;\n    1 : RNONE;  # Don't need register for writing\n];\n\n## Execute stage ###################################################\n\n## Select input A to ALU\nint aluA = [\n    icode in { RRMOVL, OPL } : valA;\n    icode in { IRMOVL, RMMOVL, MRMOVL, IOPL } : valC;\n    icode in { CALL, PUSHL } : -4;\n    icode in { RET, POPL } : 4;\n    icode in { LOOP } : -1;\n    # Other instructions don't need ALU\n];\n\n## Select input B to ALU\nint aluB = [\n    icode in { RMMOVL, MRMOVL, OPL, IOPL, CALL, PUSHL, RET, POPL , LOOP} : valB;\n    icode in { RRMOVL, IRMOVL } : 0;\n    # Other instructions don't need ALU\n];\n\n## Set ALU function\nint alufun = [\n    icode in { OPL, IOPL } : ifun;\n    1 : ALUADD;  # Perform additions by default\n];\n\n## Should condition codes be updated?\nbool set_cc = icode in { OPL, IOPL};\n\nbool is_bch = icode in { JXX, LOOP};\n\n## Memory stage ####################################################\n\n## Set read control signal\nbool mem_read =\n    icode in { MRMOVL, POPL, RET };\n\n## Set write control signal\nbool mem_write =\n    icode in { RMMOVL, PUSHL, CALL };\n\n## Select memory address\nint mem_addr = [\n    icode in { RMMOVL, PUSHL, CALL, MRMOVL } : valE;\n    icode in { POPL, RET } : valA;\n    # Other instructions don't need address\n];\n\n## Select memory input data\nint mem_data = [\n    # Value from register\n    icode in { RMMOVL, PUSHL } : valA;\n    # Return PC address\n    icode == CALL : valP;\n    # Default: Don't write anything\n];\n\n## Program Counter update ##########################################\n\n## Compute address of next instruction to be fetched\nint new_pc = [\n    # Call: Use immediate value\n    icode == CALL : valC;\n    # Taken branch:  Use immediate value\n    icode in { JXX } && Bch : valC;\n    ((icode == LOOP) && (valE!=0) )&& Bch : valC; \n    # Completion of RET instruction: Use value retrieved from stack\n    icode == RET : valM;\n    # Default: Use incremented PC\n    1 : valP;\n];\n"
}